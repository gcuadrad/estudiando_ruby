bundle install: instala el conjunto de depencencias de mi proyecto.

jbuilder: es una gema integrada en rails que permite imprimir variables en formato
json

Archivos:
gitignore:
- .bundle: Descargas de las gemas
- .sqlite3: son archivos de base de datos
- log
- tmp
config.ru: Utiliza los servidores basados en rack para generar servidores en ruby.
Gemfile: Lista las gamas instaladas y en que ambiente se utlizan.
Gemfile.lock: lista las dependencias de cada gema y sus versiones. Se asegura que no sobrescribas tus gemas.
Rakefile: gerar tareas dentro de ambiente de rails y linea de comandos.
README.doc: La documentación para instalar tu proyecto.

Carpetas:
app:
  - assets: contiene javascript, hojas de estilos, imágenes.
  - Controller:

mailers: Generar vistas de correos electrónicos.

en consola:

rake routes: Indica todas las rutas de la aplicación. ****Verbos http

DSL: Lenguaje de dominio específico

Los métodos dentro de los controllers se llaman acciones.
Para agregar una nueva acción hay que incluirlo en el archivo routes
para definirla hay que agregar una linea con : get 'nombre-controller#method'
También hay que agregar la ruta en la que se realizará la solicitud ex "actions"

redireccionar: redirect_to action: <method>,id: Post.first.id (si necesita id)
Redireccionar es útil cuando recibes un post, delete, put que devuelva algo.
render vista es algo así como traer una página sin redireccionar a ella.
Renderear puede ser util cuando quieres hacer un parcial o una vista.


Pasar variables a json
 Dentro de la carpeta del controlador crear un archivo con el nombre de la accion
 con el formato action.json.jbuilder
 e incluir dentro json.<llave> @<variable> ex json.task @task

------------ Pasos hechos creando un formulario ------------

- Primero se necesita generar un controlador.
rails generate controller <nombre-controlador> <acciones> <acciones>
(Las acciones son métodos dento de la clase controlador.)

- configurar el archivo routes agregando la linea:
  resources :<nombre-controlador>, only [:new, :create, :index, :show, :assign, :update, :destroy]
  Puedes borrar las opciones que no se utilizarán.

Clase modelo:
- Se crea una clase en modelo con el objeto y variables requeridas.

- Se agregaron los includes requeridos para funcionar con ActiveModel:

include ActiveModel::Validations
include ActiveModel::Conversion
extend ActiveModel::Naming

- se agregan los attr_accessors a las variables.

- se agregan las validaciones para el formulario requeridas.

- se crea el construcor que recibe por parámetro un hash y a cada valor
 y con cada valor:  send("#{name}=", value) *No se que es esto.

 - se define un método persisted? que devuelve un valor falso * No se para que.

Active record: gema que crea la estructura de la base de datos.
  rails g model user:string lastname:string age:integer password:digest
Crea el modelo vacio ya que puede leerlo en tiempo de ejecución.
seed: crear objetos una vez que levantemos la aplicación.
user = User.create([{name:'Gonzalo', lastname: 'Cuadra', password: 'Gonzalo.2016',
   password_confirmation: 'Gonzalo.2016'}])
Luego para lanzarlo se utiliza el comando: rake db:seed (Puede indicar que el número no está actualizado con la bd)

Gemas: luego de activarlas en el Gemfile hay que ejecutar en la consola el comando bundle para instalarla.


Migraciones: permiten modificar la estructura de la bd sin tener que volver a crearla.

Cuando usas el comando db:migrate estás actualizando el archivo schema.rb de la carpeta db con los datos de las
nuevas migraciones ubicadas en la carpeta migrate.

Nombres en plural y singular.
Las tablas tienen nombres plurales a diferencia de las clases en singular.

Validaciones:
van normalmente en los modelos sintaxis:
  validate <atributo>, <tipo de validacion> : <estado>
ex: validate :user, presence: true
